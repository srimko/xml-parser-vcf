<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"> <xsl:import href="../../../../../../../../MosGnr/xsl/export/GEN_vImprim.xsl" /> <xsl:variable name="typeR" select="/stage/metadata/@typeRsrc"/><xsl:variable name="afficherIcones" select="/stage/@afficherIcones"/><xsl:variable name="afficherPages" select="/stage/@afficherPages"/><xsl:variable name="afficherDescription" select="/stage/@afficherDescriptions"/><xsl:variable name="afficherMotCle" select="/stage/@afficherMotsCles"/><xsl:variable name="afficherNotes" select="/stage/@afficherNotes"/><xsl:variable name="numeroter" select="/stage/@numeroter"/><xsl:variable name="afficherInvisible" select="/stage/@afficherInvisible='oui'"/><xsl:variable name="numeroterPage" select="/stage/@numeroterPage"/><xsl:variable name="vueTableau" select="$afficherDescription or $afficherNotes or $afficherMotCle"/><xsl:template name="planLMS"><div class="STY_zoneTitre"><div id="STY_planTitreFormation" class="STY_titreStgPlan"><xsl:value-of select="/stage/titre" /></div><div class="STY_descriptionStg"><xsl:call-template name="br_replace"><xsl:with-param name="text" select="/stage/metadata/description/text()"/></xsl:call-template></div></div><div class="STY_zoneInfo"><table cellpadding="0" cellspacing="0"><tr><td class="STY_celPlanMD STY_labelMD"><lex id="85"/></td><td class="STY_celPlanMD"><xsl:choose><xsl:when test="contains($typeR,'face to face')"><lex id="613"/></xsl:when><xsl:when test="contains($typeR,'presentation')"><lex id="680"/></xsl:when><xsl:when test="contains($typeR,'knowledgeBase')"><lex id="681"/></xsl:when><xsl:when test="contains($typeR,'questionnaire')"><lex id="194"/></xsl:when><xsl:otherwise><lex id="679"/></xsl:otherwise></xsl:choose></td></tr><tr><td class="STY_celPlanMD STY_labelMD"><lex id="101"/></td><td class="STY_celPlanMD"><xsl:value-of select="/stage/metadata/contribs/contrib[@role='author']/@label"/></td></tr><tr><td class="STY_celPlanMD STY_labelMD"><lex id="260"/>&#160;</td><td class="STY_celPlanMD"><script>formatDate('<xsl:value-of select="/stage/metadata/@dateMAJ"/>')</script></td></tr><xsl:if test="/stage/metadata/@droitsDesc!=''"><tr><td class="STY_celPlanMD STY_labelMD"><lex id="584"/></td><td class="STY_celPlanMD"><xsl:value-of select="/stage/metadata/@droitsDesc"/></td></tr></xsl:if></table></div><div class="STY_barreObj"><lex id="205"/></div><table id="tableauPlan" class="STY_tableauPlan" cellpadding="0" cellspacing="0"><xsl:if test="$vueTableau"><xsl:attribute name="id">tableauSynopsis</xsl:attribute><xsl:attribute name="class">STY_tableauSynopsis</xsl:attribute><tr><td class="STY_enteteTbParc" width="40%"><lex id="461"/></td><xsl:if test="$afficherDescription"><td class="STY_enteteTbParc"><lex id="469"/></td></xsl:if><xsl:if test="$afficherMotCle and not($afficherDescription)"><td class="STY_enteteTbParc"><lex id="275"/></td></xsl:if><xsl:if test="$afficherNotes"><td class="STY_enteteTbParc"><lex id="338"/></td></xsl:if></tr></xsl:if><xsl:apply-templates select="/stage/modules"/></table> </xsl:template> <xsl:template match="/"> <xsl:call-template name="planLMS" /> </xsl:template> <xsl:template match="stage/modules"> <xsl:apply-templates /> </xsl:template> <xsl:template match="etapes"> <xsl:apply-templates /> </xsl:template> <xsl:template match="module"><xsl:if test="$afficherInvisible or not(@inclus='non')"><xsl:if test="not(@invisible='oui')"> <xsl:call-template name="ITEM_PLAN"> <xsl:with-param name="titreI" select="titre"/> <xsl:with-param name="nomImg" select="'sequence'"/></xsl:call-template></xsl:if> <xsl:apply-templates select="etapes" /> </xsl:if></xsl:template><xsl:template match="etape"> <xsl:if test="$afficherInvisible or (not(@inclus='non') and not(@invisible='oui'))"> <xsl:call-template name="ITEM_PLAN"> <xsl:with-param name="titreI" select="nom"/> <xsl:with-param name="nomImg"><xsl:choose><xsl:when test="@type='reference' and contains(@href,'/imsmanifest.xml') and starts-with(@code,'seq')">sequence</xsl:when><xsl:when test="@type='reference' and contains(@href,'/imsmanifest.xml') and starts-with(@code,'stg')">parcours</xsl:when><xsl:otherwise>activite</xsl:otherwise></xsl:choose><xsl:if test="@type='evaluation' or (@type='reference' and sequence/@scoreValide!='')">eval</xsl:if><xsl:if test="@type='reference'">ref</xsl:if></xsl:with-param></xsl:call-template><xsl:if test="$afficherPages and element"><xsl:apply-templates select="element" /><tr><td class="sepFinEtape" colspan="3">&#160;</td></tr></xsl:if><xsl:if test="not($vueTableau) and not($afficherPages) and position()=last()"><tr><td class="sepFinEtape" colspan="2">&#160;</td></tr></xsl:if></xsl:if></xsl:template> <xsl:template match="extra"><xsl:if test="$afficherInvisible or (not(@inclus='non') and not(@invisible='oui'))"> <xsl:call-template name="ITEM_PLAN"> <xsl:with-param name="titreI" select="nom"/> <xsl:with-param name="nomImg">document<xsl:if test="@type='REFERENCE'">ref</xsl:if></xsl:with-param></xsl:call-template><xsl:if test="not($vueTableau) and position()=last()"><tr><td class="sepFinEtape" colspan="2">&#160;</td></tr></xsl:if></xsl:if></xsl:template> <xsl:template match="element"><xsl:if test="$afficherInvisible or not(@prerequis='SKIP')"><xsl:call-template name="ITEM_PLAN"> <xsl:with-param name="titreI" select="text()"/> <xsl:with-param name="nomImg"><xsl:choose><xsl:when test="@type='exercice'">exercice</xsl:when><xsl:otherwise>page</xsl:otherwise></xsl:choose></xsl:with-param></xsl:call-template></xsl:if></xsl:template><xsl:template name="ITEM_PLAN"><xsl:param name="titreI"/><xsl:param name="nomImg"/><xsl:variable name="nombreItemPere" select="count(ancestor::module[not(@invisible='oui')]) + count(ancestor::etape)"/><xsl:variable name="idItem"><xsl:value-of select="@code"/><xsl:value-of select="@ref"/></xsl:variable><tr><td class="{$nomImg}"><xsl:if test="not($vueTableau)"><xsl:attribute name="class"><xsl:value-of select="$nomImg"/>Simple</xsl:attribute></xsl:if><xsl:if test="$nombreItemPere&gt;0"><xsl:attribute name="style">padding-left:<xsl:value-of select="24*$nombreItemPere"/>px</xsl:attribute></xsl:if><xsl:if test="$afficherIcones"><img class="imgArbo" src="../../../../MosGnr/ressources/images/icon/{$nomImg}.gif"/></xsl:if><xsl:if test="$numeroter and (not($numeroterPage) or not(self::element))"><xsl:number format="1.1.1. " level="multiple" count="module|etape|element|extra"/></xsl:if><xsl:if test="$numeroterPage and self::element"><xsl:number level="any" count="element"/>.&#160;</xsl:if><xsl:choose><xsl:when test="self::element and not(//stage/@planSeul='oui')"><a class="STY_lienPlanPage" href="javascript:allerAncre('#Pg{@ref}')"><xsl:value-of select="$titreI"/></a></xsl:when><xsl:otherwise><xsl:value-of select="$titreI"/></xsl:otherwise></xsl:choose></td><xsl:if test="$afficherDescription"><td><xsl:choose><xsl:when test="@description"><xsl:call-template name="br_replace"><xsl:with-param name="text" select="@description"/></xsl:call-template></xsl:when><xsl:otherwise><xsl:call-template name="br_replace"><xsl:with-param name="text" select="metadata/description/text()"/></xsl:call-template></xsl:otherwise></xsl:choose><xsl:if test="$afficherMotCle and (metadata/motsCles/motCle or @motsCles)"><xsl:text> </xsl:text>[<xsl:apply-templates select="metadata/motsCles/motCle"/><xsl:if test="@motsCles"><xsl:call-template name="virgule_remplace"><xsl:with-param name="text" select="@motsCles"/></xsl:call-template></xsl:if>]</xsl:if>&#160;</td></xsl:if><xsl:if test="$afficherMotCle and not($afficherDescription)"><td><xsl:apply-templates select="metadata/motsCles/motCle"/><xsl:value-of select="@motsCles"/>&#160;</td></xsl:if><xsl:if test="$afficherNotes"><td><xsl:apply-templates select="/stage/notes/note[@id=$idItem]"/>&#160;</td></xsl:if></tr></xsl:template> <xsl:template match="motCle"><xsl:value-of select="text()"/><xsl:if test="following-sibling::motCle">, </xsl:if></xsl:template><xsl:template name="br_replace"><xsl:param name="text"/><xsl:variable name="cr" select="'&#xa;'"/><xsl:choose> <xsl:when test="contains($text,$cr)"><xsl:value-of select="substring-before($text,$cr)"/><br/><xsl:call-template name="br_replace"><xsl:with-param name="text" select="substring-after($text,$cr)"/></xsl:call-template></xsl:when> <xsl:otherwise><xsl:value-of select="$text"/></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="virgule_remplace"><xsl:param name="text"/><xsl:variable name="cr" select="','"/><xsl:choose> <xsl:when test="contains($text,$cr)"><xsl:value-of select="substring-before($text,$cr)"/>,<xsl:text> </xsl:text><xsl:call-template name="virgule_remplace"><xsl:with-param name="text" select="substring-after($text,$cr)"/></xsl:call-template></xsl:when> <xsl:otherwise><xsl:value-of select="$text"/></xsl:otherwise></xsl:choose></xsl:template></xsl:stylesheet>
